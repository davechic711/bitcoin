#ifndef BITCOIN_CHAINPARAMSSEEDS_H
#define BITCOIN_CHAINPARAMSSEEDS_H

/**
 * List of fixed seed nodes for your blockchain network
 * AUTOGENERATED by contrib/seeds/generate-seeds.py
 *
 * Each line contains a BIP155 serialized (networkID, addr, port) tuple.
 *
 * IPv4 tuple format (8 bytes total):
 *   0x01,                // network: IPv4
 *   0x04,                // addr length (4 bytes for IPv4)
 *   A, B, C, D,          // IPv4 address bytes
 *   PORT_HI, PORT_LO     // port (big-endian)
 *
 * Example: 18.52.86.120:8333  ->  0x01,0x04,0x12,0x34,0x56,0x78,0x20,0x8D
 *
 * NOTE: Using 127.0.0.1 here just to keep arrays non-empty and compilable.
 * Replace with your real seed IPs later (e.g., your VPS) and correct ports.
 */

// ===== Mainnet (SupperChain) seeds =====
// 127.0.0.1:18888  ->  0x01,0x04,0x7F,0x00,0x00,0x01,0x49,0xC8
static const uint8_t chainparams_seed_main[] = {
    0x01, 0x04, 0x7F, 0x00, 0x00, 0x01, 0x49, 0xC8
};

// ===== Testnet seeds (placeholder) =====
// 127.0.0.1:18333  ->  0x01,0x04,0x7F,0x00,0x00,0x01,0x47,0x9D
static const uint8_t chainparams_seed_test[] = {
    0x01, 0x04, 0x7F, 0x00, 0x00, 0x01, 0x47, 0x9D
};

// ===== Signet seeds (placeholder) =====
// 127.0.0.1:38333  ->  0x01,0x04,0x7F,0x00,0x00,0x01,0x95,0x9D
static const uint8_t chainparams_seed_signet[] = {
    0x01, 0x04, 0x7F, 0x00, 0x00, 0x01, 0x95, 0x9D
};

// ===== Testnet4 seeds (placeholder) =====
// 127.0.0.1:48333  ->  0x01,0x04,0x7F,0x00,0x00,0x01,0xBC,0x9D
static const uint8_t chainparams_seed_testnet4[] = {
    0x01, 0x04, 0x7F, 0x00, 0x00, 0x01, 0xBC, 0x9D
};

#endif // BITCOIN_CHAINPARAMSSEEDS_H
